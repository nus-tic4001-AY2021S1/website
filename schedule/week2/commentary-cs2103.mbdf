{% from "common/topics.njk" import panopto, slugify, topic_followup, topic_preamble with context %}
{% from "common/macros.njk" import embed_topic with context %}


{% call topic_preamble("SE: Intro") %}

Given this is a first course in SE, tradition demands that we start by defining the subject. However, we are not going to spend a lot of time going through definitions of SE. Instead, let's look at an extract from the very first chapter of a very famous SE book, with the aim of providing some inspiration but also an appreciation of the challenges ahead.

{% endcall %}
<!-- ---------------------------------------------------------------------------- -->

{% call topic_preamble("SDLC Process Models") %}

Broadly speaking, there are two approaches to doing a software project. Those two approaches are also highly relevant to the way this module is run, and how it is different from most SE modules elsewhere.

Let's learn about those two approaches early so that we can better understand how this module works.

{% endcall %}

<!-- ---------------------------------------------------------------------------- -->

{% call topic_preamble("RCS: Revision History") %}

This week, you are starting your individual project (iP). As you are adding code to the iP in rapid succession, you'll need a way to keep track of all the changes you do. The tool we are going to use for that is called Git, and we need to learn Git basics pretty quickly.

Let's jump in and learn how to get started using Git in your own computer. Yes, we are now switching our focus to the _project management_ aspect of SE.

{% endcall %}

<!-- ---------------------------------------------------------------------------- -->

{% call topic_preamble("revisionControl-what") %}

First, let's learn a bit about _tracking the change history of a project_ in general, at a higher level.

{% endcall %}

<!-- ---------------------------------------------------------------------------- -->

{% call topic_preamble("gitAndGithub-init") %}

Now that we know what RCS is in general, we can try to practice it ourselves using a specific tool i.e., Git.

The following section gives a specific scenario that includes the steps of initializing a Git repository.

**If you are new to Git**, you are highly recommended to ==follow those steps in your own computer== to get some hands-on practice as you learn Git usage.

{% endcall %}

<!-- ---------------------------------------------------------------------------- -->

{% call topic_preamble("revisionControl-savingHistory") %}

For the next few sections, the drill is the same: first learn the high-level explanation of a revision control concept, and then follow the given scenarios yourself to learn how to apply that concept using Git.

{% endcall %}

<!-- ---------------------------------------------------------------------------- -->

{% call topic_preamble("RCS: Remote Repos") %}

Having learned how to use Git in your own computer, let's also learn a bit about working with remote code repositories too. Yes it's a bit too much to take in one week but we want you to start using Git in your iP from the very beginning.

{% endcall %}

<!-- ---------------------------------------------------------------------------- -->

{% call topic_preamble("IDEs: Basic Features") %}

 As you are likely to be using an IDE for the iP, let's learn at least enough about IDEs to get you started using one.

:thinking: In case you are puzzled by the sudden change of topic, note the following:

{{ embed_topic("../../admin/moduleOverview.md#meaning-of-iterative-topics", "Admin " + icon_embedding + " Module Overview â†’ Extract", "3") }}
<p/>

{% endcall %}

<!-- ---------------------------------------------------------------------------- -->

{% call topic_preamble("Automated Testing of Text UIs") %}

As you start adding features to your iP iteratively, you'll need a way to detect if the new code breaks the existing code. Next, let's learn a rather simple way to do that using a certain type of testing (we'll be learning more sophisticated methods in later weeks).

This also means we are not switching focus from the _implementation_ aspect to the _testing_ aspect of SE.

{% endcall %}

<!-- ---------------------------------------------------------------------------- -->

{% call topic_followup("testing-testAutomation-testingTextUis") %}

Congrats! You've made it to the end of this week's topics. It feels like a lot right now but now that we got an early start, this stuff will be second nature to you by the time you are done with the semester. :-)

{% endcall %}

<!-- ---------------------------------------------------------------------------- -->
